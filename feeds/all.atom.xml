<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>y2kbugger</title><link href="http://blog.y2kbugger.com/" rel="alternate"></link><link href="http://blog.y2kbugger.com/feeds/all.atom.xml" rel="self"></link><id>http://blog.y2kbugger.com/</id><updated>2020-08-13T13:07:57-04:00</updated><entry><title>I am now a maintainer on the Arch User Repository</title><link href="http://blog.y2kbugger.com/first_arch_user_repository_submission.html" rel="alternate"></link><published>2020-04-14T00:06:28-04:00</published><updated>2020-04-14T00:06:28-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2020-04-14:/first_arch_user_repository_submission.html</id><summary type="html">&lt;p class="first last"&gt;Just made my first submission to the arch user repository (AUR)&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/dfXck6rcLDcZHtv17 --&gt;
&lt;div class="section" id="long-time-user-first-time-maintainer"&gt;
&lt;h2&gt;Long time user, first time maintainer&lt;/h2&gt;
&lt;p&gt;I've been a Linux user for a decade now, Ubuntu at first, but I switched to &lt;a class="reference external" href="https://archlinux.org"&gt;ArchLinux&lt;/a&gt; after a year or two. I quickly found the &lt;a class="reference external" href="https://aur.archlinux.org/"&gt;Arch User Repository&lt;/a&gt; or AUR to be a treasure trove of free (libre) software; I am still in awe today. On ms windows, finding software meant downloading binaries from sketchy freeware sites. The prospects were better on Ubuntu since many software projects engaged with the community and produces regular releases. One drawback however were the stale repos, some packages on ubuntu were still pointing at releases that were years old.The Ubuntu &lt;a class="reference external" href="https://launchpad.net/ubuntu/+ppas"&gt;Personal Package Archives&lt;/a&gt; PPAs was supposed to solve this, but I never had  good luck with them. The packages always seemed random whether or not they were compatible and maintained.&lt;/p&gt;
&lt;img alt="ArchLinux Logo" src="https://lh3.googleusercontent.com/mapAQeHjDZmDn4Jq-FXyEhuFDEB6IHuEBzk8egTflCpiwLU9g0-W_YevSXbZEE-tQopVtEIJLO_rkjgf2TjA_olTqV7gGPiiDPKliO23xXNlOENJnDhobYLeLh7w942lCrhiASjMVHA=w683-h228-no" /&gt;
&lt;p&gt;Enter ArchLinux, everything is on the bleeding edge. The vast majority of typical software needs is packaged and up-to-date. For more custom software, there is the AUR. It started as just people sharing recipes for building packages...and well, that's still the case and it's a &lt;em&gt;really&lt;/em&gt; good thing too, it's beauty is in the simplicity. Packaging makes sure that the software you install goes in cleanly and can be removed without leftover files. You can think of ArchLinux as basically a package manger &lt;a class="footnote-reference" href="#pacman" id="id1"&gt;[1]&lt;/a&gt; and a wonderful community. The AUR acts as a funnel for new packages to become official in the community repository, which are built packages rather than just recipes.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="pacman" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;See pacman: &lt;a class="reference external" href="https://wiki.archlinux.org/index.php/pacman"&gt;https://wiki.archlinux.org/index.php/pacman&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="my-contribution"&gt;
&lt;h2&gt;My contribution&lt;/h2&gt;
&lt;p&gt;For my first contribution I wanted something simple, just to learn the process. At work I have been spending a lot of time with the conda package manager, and a few months ago I submitted my first conda-forge recipe. For a long time I have wanted to put something on AUR and now that packing is fresh on my mind I figure it's a good time to get this one under my belt. I chose a shell script that I have used for years; it is a fork of a now deleted AUR package. Since it's a shell script it still needs to be installed to the system but it doesn't have the complication of needing to be compiled.&lt;/p&gt;
&lt;img alt="My AUR package page" src="https://lh3.googleusercontent.com/Cc_WYvWQQrft1j2Qgb6mjuLL5t1zpBXlPVjViDqeBuPgJLK0Spus6pszYoEhzmO5gTY-NH2uJ44rq1CyeDapBKiJhOkhAKwJc77_sZpWv9JL9qgza5Yawd9ilg58bau2i1nR8vu6xEk=w503-h216-no" /&gt;
&lt;p&gt;The package is called &lt;cite&gt;dmenu-recent-aliases&lt;/cite&gt;, and it is a lightweight application launcher. It provides fuzzy searching for all the executables on your &lt;cite&gt;PATH&lt;/cite&gt; and also includes your custom bash functions and aliases. I have added a few extra features as well, for the full docs see &lt;a class="reference external" href="https://gitlab.com/y2kbugger-projects/scripts/dmenu-recent-aliases"&gt;https://gitlab.com/y2kbugger-projects/scripts/dmenu-recent-aliases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A second reason for choosing this one is that there is some demand for the script and the original is no longer being maintained.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Broken link on aur" src="https://lh3.googleusercontent.com/oh9j6EPpcdpLD-1pWDsRzv18wSoKxlbB_bMcunePT2W8DGunnHpAswL7riiCzTgzkyiQ_I0h_00VP-mDrfH3ZeHMmnCwn9PtHVUu219CopWoYB7GI-NQell_BQ3yM096_IMTp5bAXlk=w438-h78-no" /&gt;
&lt;p class="caption"&gt;The archwiki still has a link to the old package, but it no longer exists.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="become-a-maintainer-yourself"&gt;
&lt;h2&gt;Become a maintainer yourself&lt;/h2&gt;
&lt;p&gt;Before you start to make a package, you should be familiar how to manually install other's packages from the AUR. Avoid AUR helpers for a while, trust me.&lt;/p&gt;
&lt;p&gt;Here is the quickstart guide:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_packages"&gt;https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_packages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As far as the packaging process goes, it's not too difficult but I can't begin to cover it all here. Instead, I recommend reading at least all of these:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Creating_packages"&gt;https://wiki.archlinux.org/index.php/Creating_packages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Arch_package_guidelines"&gt;https://wiki.archlinux.org/index.php/Arch_package_guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/AUR_submission_guidelines"&gt;https://wiki.archlinux.org/index.php/AUR_submission_guidelines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It may also be helpful to check out my minimal &lt;cite&gt;PKGBUILD&lt;/cite&gt; here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://aur.archlinux.org/dmenu-recent-aliases-git.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After you cobble together what you think is a good &lt;cite&gt;PKGBUILD&lt;/cite&gt; you can ask for a review on the &lt;cite&gt;#archlinux-aur&lt;/cite&gt; IRC. Try &lt;a class="reference external" href="https://www.irccloud.com/"&gt;IRCCloud&lt;/a&gt; if you aren't familiar with IRC.&lt;/p&gt;
&lt;p&gt;Finally, submitting is as easy as a git push, but be sure all of your i's are dotted and t's are crossed.&lt;/p&gt;
&lt;p&gt;Now you are &amp;lt;strike&amp;gt;all done&amp;lt;/strike&amp;gt; just beginning. As a maintainer it's your job to keep the package up-to-date and incorporate suggestions from the community.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="Linux"></category><category term="packaging"></category><category term="OpenSource"></category><category term="ArchLinux"></category></entry><entry><title>Battery free wireless switch?</title><link href="http://blog.y2kbugger.com/energy-havesting-lightswitch.html" rel="alternate"></link><published>2020-03-26T00:00:00-04:00</published><updated>2020-08-13T13:07:57-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2020-03-26:/energy-havesting-lightswitch.html</id><summary type="html">&lt;p class="first last"&gt;Settling a bet of whether a wireless switch really didn't have a battery.&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/NwiirCi5DN8tfZqP8 --&gt;
&lt;div class="section" id="robust-wireless-light-switch"&gt;
&lt;h2&gt;Robust wireless light switch&lt;/h2&gt;
&lt;p&gt;I was looking for a system of wireless switches that didn't rely on wifi. I wanted something standalone because of reliability and security. I noticed one brand advertised &amp;quot;no battery&amp;quot; and I took that at face value.&lt;/p&gt;
&lt;img alt="Amazon ad for acegoo switch" class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3e3prwqvj3a56qTJPbfABldmo3IkhC8qyUA-hQMQvfjgDAdBOoHMsoCTAzI85O0CJ7_4CWY1MkytaMcMZJrZ9Um_irie8TJzTkK5IOfanQZCBFIoD6gDQctsvO9ePqWhZYthBHM4cjlzgTPprOCVqv7XQ=w683-h264-no" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="too-good-to-be-true"&gt;
&lt;h2&gt;Too good to be true&lt;/h2&gt;
&lt;p&gt;Sometime after installing I was talking to a co-worker and we started wondering: &amp;quot;Could it be a sealed lithium battery?&amp;quot; I knew this was done in the 10 year no maintenance smoke detectors, and I thought the &amp;quot;battery free&amp;quot; might actually be marketing lies.&lt;/p&gt;
&lt;img alt="How the switch is used." class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3eEjxUTaaF23O8dVz19PxDf7caH6lX0eH2OfvC3i9QWno-S8bUwrJWe22icYK_95z0cyQeo_E3ASTuOUXszwaWRlbKE6G8yyNIEQl4Lg7DPehRRJbfFhZ3mC29LrRFxwPuwhqRa6uAWOL4Jy5D-ADTNlA=w545-h678-no" style="width: 60%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="teardown"&gt;
&lt;h2&gt;Teardown&lt;/h2&gt;
&lt;p&gt;A large mechanical switch, with a smaller module in the center. There are more membrane switches than one expect for an on off switch. The antenna was run around the outside.&lt;/p&gt;
&lt;img alt="Removing the case." class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3e1pcK6VhYyIFg91zihsp8w7e9nSO3cSF1nDEVS4DLI0UFMD1PHxYkd0rWXgBNOSGo7R8NQIMLTfiMmC9PrqIpx9LVGSGF71q1Jt0iigbclF4qC-hIENJEj0azfWJJNvAXSAtw4vxTCNzfegz86OJ4pfA=w683-h513-no" style="width: 100%;" /&gt;
&lt;p&gt;There are levers which are moved by the switch and seem to move something back and forth internally.&lt;/p&gt;
&lt;img alt="Levers" class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3eam4ql5dpjHEB7kGDh28Vdq4zkvUHnVUczglv_y9HZpwTd5qKrNMH5at6RRGBqsBmi-g0KFc2hcFoKFY_rWDIKVgs6ofzoLT8gUS53uc0Q6QfeQNWk21qGmOPRCm15zUYCYCvu6UnhC_-sthopvhCpGw=w683-h329-no" style="width: 100%;" /&gt;
&lt;p&gt;Aha, magnets and a coil, it really does generate its own power!&lt;/p&gt;
&lt;img alt="Coil and magnets" class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3cQPGUj_ta7hJ2nne7fHtr5S-rWLGC6o7--OqfTB7Umxolq0qH8iqd1wrLGGYLsYyJad4dTfShZOrgBVWvBhJJJ7eeqJjcgt4OZI-e8-d96kC8506VMQPcYerhZnFbLOMZ7GxOPyVgP114q5FITNwIXEQ=w532-h630-no" style="width: 100%;" /&gt;
&lt;/div&gt;
</content><category term="electronics"></category><category term="teardown"></category></entry><entry><title>Shower Speaker</title><link href="http://blog.y2kbugger.com/shower_speaker.html" rel="alternate"></link><published>2020-01-23T00:00:00-05:00</published><updated>2020-01-23T00:00:00-05:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2020-01-23:/shower_speaker.html</id><summary type="html">&lt;p class="first last"&gt;How I turned a light fixture into a bluetooth speaker.&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/PUs3gPhkiMCq87nNA --&gt;
&lt;div class="section" id="chasing-the-dream-shower-music"&gt;
&lt;h2&gt;Chasing the dream, shower + music&lt;/h2&gt;
&lt;p&gt;I have have numerous methods for listening to music and talks in the shower. The first one was a waterproof, battery powered AM/FM radio. The reception was crap. Over the years, other solutions included bluetooth speakers of various quality.&lt;/p&gt;
&lt;img alt="light fixture pieces." src="https://lh3.googleusercontent.com/pw/ACtC-3e-UXvlfryZbjFfKdu8C9Scfgb_MKWgleQf4XdiA1egEa65oW__iavHXBEk026fI3erJyopEHpfkRPK1fhdW3Rz6RTaogGme3ZuZpQGs4nt1rTS-BL2VIYbZBS9ulICZddxjBBZ7UB6fkGMylSXYULxJA=w683-h554-no" style="width: 100%;" /&gt;
&lt;p&gt;The problem is that it is quite hard to get a speaker loud enough from outside of the shower. Before I moved I had pretty good results with a google home mini and double-sided tape. The new house though has sliding glass doors and that wouldn't work.&lt;/p&gt;
&lt;p&gt;For a while I had given up and just brought my phone in.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="take-it-up-a-notch"&gt;
&lt;h2&gt;Take it up a notch&lt;/h2&gt;
&lt;p&gt;In the new house, I started thinking about modding the light fixure for sound.&lt;/p&gt;
&lt;img alt="light fixture in place." src="https://lh3.googleusercontent.com/pw/ACtC-3e6znAbqLyEvB-bbI5jW2m10e68eZp7LuUQdQRYXmcMKSTKb_ev4HwbWqyOBNrttaRZx6xqcPWw_AjuYkEoerHotvrIN2ymGjQ0UXTeE6DROp9iNDyE-SypDFEe5aXYesS2qprYJRmKaesGlKOWsN7P3Q=w683-h303-no" style="width: 100%;" /&gt;
&lt;p&gt;After some thinking, I thought I had my options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Google Home Mini inside the light.&lt;/li&gt;
&lt;li&gt;Round speaker to replace the light.&lt;/li&gt;
&lt;li&gt;Keep using phone.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But while I was looking for a suitable speaker I remembered something I had seen on youtube.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=CKIye4RZ-5k"&gt;https://www.youtube.com/watch?v=CKIye4RZ-5k&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is basically a voice-coil that can be attached to a flat surface to turn it into an active acoustic radiator. That's fancy for &amp;quot;speaker&amp;quot;.&lt;/p&gt;
&lt;img alt="Voice Coil Exciter" src="https://lh3.googleusercontent.com/pw/ACtC-3eG2MHqqrY9s8Fvr3d8dyjg3PWyTTtZj3jTuWcoD56R9TXiW0WYvyMZKN1EqII8JDodt_eV4ob_mmwqSxjyMKUBTs_Tm4YRTm9j1WpQQ5HEr9xCeWDvR8Dmj14Cdc_isX23sSqrs2lDbLvdMbDyNouDAw=w683-h379-no" style="width: 100%;" /&gt;
&lt;p&gt;I figured this would be great because it would maximize the surface area of the speaker, and it would also allow me to continue using the light fixture normally. It could also be reversibly installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="parts-list"&gt;
&lt;h2&gt;Parts List&lt;/h2&gt;
&lt;p&gt;Goal: Integrate using cheapest junk modules available from internet.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Voice coil - &lt;a class="reference external" href="https://www.amazon.com/gp/product/B00CWEJJ9K"&gt;$16.89&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Bluetooth Module - &lt;a class="reference external" href="https://www.amazon.com/gp/product/B07W4PJ469"&gt;$2.89/ea&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amplifier - &lt;a class="reference external" href="https://www.amazon.com/gp/product/B01HXU1G02"&gt;$5.99&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Power Supply - Had on hand&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="interesting-bits"&gt;
&lt;h2&gt;Interesting bits&lt;/h2&gt;
&lt;div class="section" id="mixing-signals"&gt;
&lt;h3&gt;Mixing signals&lt;/h3&gt;
&lt;p&gt;Since almost all bluetooth receivers are stereo I had to mix the signals.&lt;/p&gt;
&lt;img alt="Mixer" src="https://lh3.googleusercontent.com/pw/ACtC-3fzgcIRnJm_WSAoTRZiZII9eRo6IixOsC9C7dHf8LBkvV9I0XxBWdkoA4gXzaJb2-Wg9cDVItT6miSOQRvwjTGlWyRVSGkg5jIv6j6Y4tXcSesvlGZU-bi62LuYc7__TzKHO7iLx0KbAfeR_QEjUwLPdQ=w683-h210-no" style="width: 100%;" /&gt;
&lt;/div&gt;
&lt;div class="section" id="delay-on-for-amplifier"&gt;
&lt;h3&gt;Delay on for amplifier&lt;/h3&gt;
&lt;p&gt;I needed to design a delay circuit for the amplifier for two reasons.&lt;/p&gt;
&lt;div class="section" id="annoying-connection-chimes"&gt;
&lt;h4&gt;Annoying connection chimes&lt;/h4&gt;
&lt;p&gt;The default recording for &amp;quot;connected, on, etc&amp;quot; are annoying in general. The fact we have this tied into the light means it would have made annoying noises throughout the day, and worse, at night.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Relay for the delay circuit" src="https://lh3.googleusercontent.com/pw/ACtC-3f0f0xTF-5QaNQTsobny7fP42nz5yWxh4n8PD0Et2glHwegVbOD_mDwXXmkXL2VdbbXON_LRYF-ku1esiC9Fq_XKNvjNJvQCwEMEDnSJQ1ff3zlDJPJTPfIm3USgICtrEAEUo0xwGRzcsN_IGEFZXV5sw=w509-h678-no" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;The relay controls the power amplifier as part of the delay cirbuit.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="turn-on-thump"&gt;
&lt;h4&gt;Turn-on thump&lt;/h4&gt;
&lt;p&gt;Secondly, if the amp turned on before the bluetooth, very loud &amp;quot;turn-on&amp;quot; thumps came through. I am proud of the hack for this one: I used an RC circuit to couple the delay to the status LED. The duty cycle of the &amp;quot;Connecting&amp;quot; blink would delay the amplifier indefinitely; however the solid &amp;quot;Connected&amp;quot; glow would put the amplifier on just after the crappy &amp;quot;connected&amp;quot; alert sound played.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Tuning by trial and error." src="https://lh3.googleusercontent.com/pw/ACtC-3dnWCOy3eCENtzF1VHMip7d2U9Qkxtl8Pa04Cuam66RBw0o0ihfcXctOZn57SLWRKRq95t_4_iVA2HZdr34dkigg1R47nnP9vmtzRfF3o-0FqZc_pFsE3RjYLWjUzpwUvv7OVwuqq2u-bOZneFfUt5b2Q=w683-h513-no" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;Tuning the delay circuit to have an indefinite hold in the &amp;quot;Connecting&amp;quot; state.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bad-documentation"&gt;
&lt;h3&gt;Bad documentation&lt;/h3&gt;
&lt;p&gt;Documentation for the bluetooth module was wrong and the &amp;quot;multi-purpose&amp;quot; button needed to be tied to ground to prevent phantom triggering. In hindsight this was obvious, but it was trust myself and disregard their schematic. Intermittent connection failures plagued me during almost the entire project. It was just infrequent enough to allow me to work through all the other parts of the project, but not enough to pinpoint the problem quickly.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-state"&gt;
&lt;h2&gt;Final State&lt;/h2&gt;
&lt;p&gt;I installed everything in a way that I could reverse everything easily in case we leave. The sound is incredibly loud, and the quality is decent. As the shower is all smooth surfaces, it can be a bit echoey. Maybe some foam/fiberglass would help, but I don't want this thing catching fire. Overall I'm extremely happy with how it turned out.&lt;/p&gt;
&lt;img alt="In place." src="https://lh3.googleusercontent.com/pw/ACtC-3fvLHQzYoWrGIsLTRfDj1ojHNkg8LIswD4eIPcDIDBS2xY3KXA7di_qyv5YifKOyI9_xw1qzfRrJWfyhIKF7hmJdqKBd1mRuPmX9828OSZjqoPsac2v36P0wqug6CQuGyh3sdf7nND3sklTSGL50cMsfQ=w683-h513-no" style="width: 100%;" /&gt;
&lt;p&gt;And of course it still works as a light.&lt;/p&gt;
&lt;img alt="Light on place." src="https://lh3.googleusercontent.com/pw/ACtC-3faWGrhsqaHhWAlsCEMobY7Fl6xDqtZMgx20a5Qh3ezMQjC4OZf7w3S5SV0m3QhiCYsQUJNxdMd35HdtNvuD2IrKtBM-9Qi97HZK4ADUoaHQLwFwkyzEXln3zrR0ujoo2qOo4OW4bbhZpz2y5S7Y6rRDA=w509-h678-no" style="width: 100%;" /&gt;
&lt;/div&gt;
</content><category term="electronics"></category><category term="audio"></category><category term="cheap-modules"></category></entry><entry><title>The C Programming Language</title><link href="http://blog.y2kbugger.com/the-c-programming-language.html" rel="alternate"></link><published>2019-12-31T00:00:00-05:00</published><updated>2020-07-19T22:54:03-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2019-12-31:/the-c-programming-language.html</id><summary type="html">&lt;p class="first last"&gt;Learning C from the book co-written by the one of the original language designers.&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/dfXck6rcLDcZHtv17 --&gt;
&lt;div class="section" id="get-close-to-the-hardware-so-you-can-c"&gt;
&lt;h2&gt;Get close to the hardware so you can C&lt;/h2&gt;
&lt;p&gt;Since I have been learning about hardware and operating systems I wanted to learn a language which is conducive for having full control of computer hardware. C is not just good for this, the level of control C gives you was tuned for writing portable operating systems. The tooling, community, and educational resources reflect this legacy.&lt;/p&gt;
&lt;p&gt;I chose to read the Kernighan and Ritchie book because I had heard that it was not just a good book for C, but good for programming in general. There is also a historical value to learning from a primary source. I can confirm this. Working through the exercises are key to understanding why C exists.&lt;/p&gt;
&lt;p&gt;Here are my attempts at the exercises:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:y2kbugger/kr.git
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-k-r-approach"&gt;
&lt;h3&gt;The K&amp;amp;R approach&lt;/h3&gt;
&lt;p&gt;Early on they teach about structuring modules so that code and interfaces could be reused. When I previously learning C++ the reason for header files seemed to be hand waved. I appreciated the way these concepts were treated in K&amp;amp;R.&lt;/p&gt;
&lt;p&gt;Later in the book though we work through reimplement functions from the standard lib. This was insightful, especially the ones which dealt with memory management such as malloc, calloc, and free as well as the Unix system interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I would definitely recommend the book to anyone interested in learning about computers. If all you care about is writing programs/computation, other languages could twist you brain in other directions (Haskell, etc), but learning C through K&amp;amp;R is a good start to learning about how computers actually work.&lt;/p&gt;
&lt;div class="section" id="but-shouldn-t-i-learn-something-modern-like-c"&gt;
&lt;h4&gt;But shouldn't I learn something modern like C++?&lt;/h4&gt;
&lt;p&gt;As a side note, don't be swayed to learn C++ merely because C is a subset. The argument goes like this: if you learn C++ you'll also learn C for free. This isn't true. If you want something a bit higher level for systems programming, I've heard good things about Rust.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="C"></category><category term="books"></category></entry><entry><title>Persimmon English Pudding</title><link href="http://blog.y2kbugger.com/persimmon-english-pudding.html" rel="alternate"></link><published>2019-12-15T00:00:00-05:00</published><updated>2020-03-26T00:00:00-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2019-12-15:/persimmon-english-pudding.html</id><summary type="html">&lt;p class="first last"&gt;Found 6 ripe persimmons at Jungle Jim's. Took a while to decide on what to make, but I landed on making an English style holiday pudding.&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/HKbDSGNgQQW1aZig8 --&gt;
&lt;div class="section" id="what-to-do-with-6-ripe-persimmons"&gt;
&lt;h2&gt;What to do with 6 ripe persimmons?&lt;/h2&gt;
&lt;p&gt;Whenever I visit &lt;a class="reference external" href="https://junglejims.com/"&gt;Jungle Jim's&lt;/a&gt;, a Cincinnati international market known as &amp;quot;a theme park of food&amp;quot;, I make sure to hunt for a new fruit. After grabbing a few interesting specimens to try, I found a section that I had never noticed before: clearance fruit. Normally overripe fruit wouldn't be too exciting, but persimmons are best when super-ripe. I took home a six pack, but I didn't have a plan for them yet.&lt;/p&gt;
&lt;img alt="Clearance persimmons from Jungle Jims." src="https://lh3.googleusercontent.com/KPn2fFh0X5Zq5ESGRaKgGDazFb6E7Rr4x5MsFJyO2akgwTP3qC_h2QCRDb6jA2uWX-2gMh7Qwqw9zrSmDSoNIPOBjisS7WHm05LkEqkDxe45oMZTsZsA1YxXmTtCIQOEuza8BTvRdpQ=w790-h508-no" /&gt;
&lt;p&gt;After a bit of googling, I settled on making an English style holiday pudding. Not being British, this was a dish I was only vaguely aware of. After reading about the dessert a bit on the internet, I had a case of what googling calls the &lt;a class="reference external" href="https://english.stackexchange.com/questions/153166/what-is-the-term-for-when-you-become-more-aware-of-something"&gt;Baader-Meinhof Phenomenon&lt;/a&gt;. It was everywhere. The strongest example was when I went to see a Christman Carol &lt;em&gt;again&lt;/em&gt;, I can't believe that the &amp;quot;pudding scene&amp;quot; had always been there, never stirring my brain to ask &amp;quot;wtf is this pudding?&amp;quot; before, I think I thought it was meat.&lt;/p&gt;
&lt;p&gt;My recipe is based on:&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://www.marthastewart.com/340210/steamed-persimmon-pudding"&gt;https://www.marthastewart.com/340210/steamed-persimmon-pudding&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="ingredients"&gt;
&lt;h2&gt;Ingredients&lt;/h2&gt;
&lt;div class="section" id="wet"&gt;
&lt;h3&gt;Wet&lt;/h3&gt;
&lt;blockquote class="highlights"&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;1/2 c. unsalted butter&lt;/div&gt;
&lt;div class="line"&gt;2.25 c. sugar &lt;a class="footnote-reference" href="#sugar" id="id1"&gt;[1]&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;6 very soft persimmons&lt;/div&gt;
&lt;div class="line"&gt;1.5 c. whole milk&lt;/div&gt;
&lt;div class="line"&gt;5 large eggs&lt;/div&gt;
&lt;div class="line"&gt;2 teaspoons pure vanilla extract&lt;/div&gt;
&lt;div class="line"&gt;1 lemon&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="dry"&gt;
&lt;h3&gt;Dry&lt;/h3&gt;
&lt;blockquote class="highlights"&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;3 c. all-purpose flour&lt;/div&gt;
&lt;div class="line"&gt;3 teaspoons ground cinnamon&lt;/div&gt;
&lt;div class="line"&gt;1 whole freshly ground nutmeg&lt;/div&gt;
&lt;div class="line"&gt;21 allspice berries&lt;/div&gt;
&lt;div class="line"&gt;13 cloves &lt;a class="footnote-reference" href="#cloves" id="id2"&gt;[2]&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;3 segment of a star anise &lt;a class="footnote-reference" href="#anise" id="id3"&gt;[3]&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;1/2 teaspoon coarse salt&lt;/div&gt;
&lt;div class="line"&gt;1 1/2 teaspoons baking soda&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="simmered"&gt;
&lt;h3&gt;Simmered&lt;/h3&gt;
&lt;blockquote class="highlights"&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;1/2 c. brandy&lt;/div&gt;
&lt;div class="line"&gt;1/3 c. sultanas (golden raisins)&lt;/div&gt;
&lt;div class="line"&gt;1 c. pecans, coarsely chopped&lt;/div&gt;
&lt;div class="line"&gt;1/3 c. finely chopped candied ginger&lt;/div&gt;
&lt;div class="line"&gt;4oz chopped candied citron&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="topping"&gt;
&lt;h3&gt;Topping&lt;/h3&gt;
&lt;blockquote class="highlights"&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;2 c. heavy cream&lt;/div&gt;
&lt;div class="line"&gt;1/4 c. brandy&lt;/div&gt;
&lt;div class="line"&gt;2 T Powdered Sugar&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="sugar" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Yes, I know sugar is not actually wet.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="cloves" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I didn't include cloves in the mine, but I thought it would be good addition.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="anise" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I originally only included one segment of anise.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="directions"&gt;
&lt;h2&gt;Directions&lt;/h2&gt;
&lt;div class="section" id="step-1-prepare-the-mold"&gt;
&lt;h3&gt;Step 1 - Prepare the mold&lt;/h3&gt;
&lt;p&gt;Traditionally one would use an English pudding mold, I didn't have that so I buttered a large stainless steel mixing bowl. I used a stock pot as the boiler setting the mixing bowl on top. Add enough water to the stockpot to come halfway up the mold; to gauge depth, test this with an empty mold by pressing in into the water.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-2-prepare-the-dry-ingredients"&gt;
&lt;h3&gt;Step 2 - Prepare the dry ingredients&lt;/h3&gt;
&lt;p&gt;Sift flour, and add all &amp;quot;dry&amp;quot; ingredients to a bowl. Stir until evenly distributed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-3-simmer-the-tasty-bits"&gt;
&lt;h3&gt;Step 3 - Simmer the tasty bits&lt;/h3&gt;
&lt;p&gt;Toast pecans in a frying pan and add all &amp;quot;Simmered&amp;quot; ingredients. Simmer for about 10 minutes.  Remove from heat; let stand for 15 minutes, allowing time for fruit to soak up excess moisture and become tender.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-combine-the-wet-stuff"&gt;
&lt;h3&gt;Step 4 - Combine the wet stuff&lt;/h3&gt;
&lt;p&gt;Meanwhile, slice tops off persimmons. Note: Original recipe says to press the fruit through sieve to remove skin. This is hopeless with a normal strainer and it's not hard to just separate skins by hand. Scoop out flesh, discard skins. (you should have 2 3/4 cups persimmon puree). Whisk in milk&lt;/p&gt;
&lt;p&gt;Cream butter and sugar; then add the rest of the &amp;quot;Wet&amp;quot; ingredients to the butter mixture. If you are using an electric mixer be sure to keep the bowl scraped.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="step-5-bring-it-all-together"&gt;
&lt;h3&gt;Step 5 - Bring it all together&lt;/h3&gt;
&lt;p&gt;Using minimal mixing, fold in all of the dry ingredients over a few quick additions. While still partially unmixed dump in &amp;quot;simmered&amp;quot; mixture of pecans, raisins, ginger, etc. Fold all until just barely mixed. Pour into prepared mold and cover with lid.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="The three mixures" src="https://lh3.googleusercontent.com/YxMdXml6K3M_39SOmbroPwndOx1unjEjvf0YwnUKmUIqFrZyqqetq5aZj2hyL6albcbDK0vNgambY9b0Wd64m5sTeKOGbXTMK3KOBW0qQ_padQUKUilE0EJ6XghTyPAIq_dXYb9vDgY=w509-h678-no" style="width: 70%;" /&gt;
&lt;p class="caption"&gt;The three mixures and the stockpot &amp;quot;double boiler&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-4-let-it-steam"&gt;
&lt;h3&gt;Step 4 - Let it steam&lt;/h3&gt;
&lt;p&gt;Bring water in stockpot to a boil. I let this go ~8 hours because of the size, 6 probably would have been ok. Since it's being steamed it can really get overcooked unless it starts to dry out. Time really depends on shape of mold+pot and the size of the pudding. Use a toothpick or skewer and test that the center is no longer a batter before calling it done.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Pudding after steaming." src="https://lh3.googleusercontent.com/koj8683CBoRaePybbFGA3YjxkX5-vAdsE8LhhTgkfOSyUPFZXe4sXQFc68ncTz6Cnmys3Mw-Qz-WHkc-pXfd4YzIlNo18s2Ku0rW1pWK_I7EKZIDGrrEsAflj96vFD5pmgosOpi0GTo=w509-h678-no" style="width: 50%;" /&gt;
&lt;p class="caption"&gt;Pudding after it had finished cooking.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-5-serve-with-cream"&gt;
&lt;h3&gt;Step 5 - Serve with cream&lt;/h3&gt;
&lt;p&gt;Now we are ready to serve.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Soft peaks of brandy whipped cream" src="https://lh3.googleusercontent.com/oQ_CT-Egd6S7kxbRT9I9L1fpvs9tpJyxXySUuVuffYpgQ_5LnLXhGPfT_Vz19Hfjuim98m-7LDfmQOzqlmUarBXNH2cKklIqFoXxUdNV3kkZpNs-leMJEQKOB1bb9pRUd0YPm-OxQ7A=w683-h437-no" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;Whip the heavy cream and brandy topping to soft peaks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="figure"&gt;
&lt;img alt="Pudding served" src="https://lh3.googleusercontent.com/LRNKaUfGX0sdVyRxDNYHc7Evvc7eC7owDtDOZInKmo7vDY5uBatRz7UdQK8qV16hkfWbTy1oZQ7EUM2RITLwqc_6O-Dt8FJooX7xyxKQzZxfgp6Fm1jn2JFtG3lBKb0uHsRN_nJES9g=w509-h678-no" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;Flip the pudding out onto a plate and cut. Serve with brandy cream sauce.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="food"></category><category term="dessert"></category></entry><entry><title>Learn How Computers Work Between Silicon and Assembly: Build a CPU with Python</title><link href="http://blog.y2kbugger.com/2019-07-28-pyohio.html" rel="alternate"></link><published>2019-07-28T00:00:00-04:00</published><updated>2019-07-28T00:00:00-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2019-07-28:/2019-07-28-pyohio.html</id><summary type="html">&lt;p class="first last"&gt;PyOhio 2019, Columbus, Ohio&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&amp;#64; &lt;strong&gt;PyOhio&lt;/strong&gt;, &lt;em&gt;Columbus, Ohio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://drive.google.com/open?id=1u8qlAK4SeqFX3ybT7zVuKWItMvCadhsgF9WmCCOM3dQ"&gt;Slides&lt;/a&gt; &lt;a class="reference external" href="https://gke.mybinder.org/v2/git/https%3A%2F%2Fy2kbugger%40bitbucket.org%2Fy2kbugger%2Fsapy.git/de5086ea943c94fec40e14478257ab2716e28c96?filepath=Simple%20As%20Possible.ipynb"&gt;Live Jupyter Notebook&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://y2kbugger@github.com/y2kbugger/sapy.git
&lt;/pre&gt;&lt;/div&gt;
&lt;!-- git clone - -branch 2019-07-28-PyOhio https://y2kbugger@github.com/y2kbugger/sapy.git --&gt;
&lt;div class="videoembed-container"&gt;
&lt;iframe class="videoembed-iframe" src="https://www.youtube.com/embed/iJqCMoAMlMA" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;p&gt;Programming languages are designed for a specific level of abstraction or distance from the hardware. The main trade off is &amp;quot;developer productivity&amp;quot; vs. &amp;quot;control over hardware&amp;quot;. C and assembly are low level and therefore map closely to CPU instructions. Python on the other hand goes through many layers, libraries, and a virtual machine before the CPU is reached. This allows powerful programs to be written concisely and cross-platform—but it also conceals the true nature at the heart of our modern world. Unveiling the magic within can lead to interesting insights about how computing got to where it is today.&lt;/p&gt;
&lt;p&gt;We will build up CPU focused on transparency, interactivity, and modularity. Our CPU has a configurable architecture and machine language. Yes, you can invent your own assembly instructors to add functionality. We will cover registers, data/address busses, memory (ROM/RAM), IO, and assemblers.&lt;/p&gt;
</content><category term="talks"></category><category term="PyOhio"></category><category term="Python"></category><category term="Retrocomputing"></category><category term="CPUs"></category></entry><entry><title>MMIX - Working on TAOCP in RISC</title><link href="http://blog.y2kbugger.com/reading-taocp-mmix.html" rel="alternate"></link><published>2018-12-27T00:00:00-05:00</published><updated>2020-05-29T15:18:21-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2018-12-27:/reading-taocp-mmix.html</id><summary type="html">&lt;p class="first last"&gt;How to read The Art of Computer Programming and do the exercises in modern RISC rather than a 1960s style architecture.&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/dfXck6rcLDcZHtv17 --&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This article I will cover why I want to read TAOCP as well as my approach. Because the books are in various states of publication, one must use additional resources besides the book to enjoy the updated RISC material.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-art-of-computer-programming"&gt;
&lt;h2&gt;The Art Of Computer Programming&lt;/h2&gt;
&lt;p&gt;The Art of Computer Programming is a legendary multi-volume computer science textbook. It was originally conceived in 1962 as a 12 chapter book documenting a wide range of algorithms. The rapid pace of change in computer science made these chapters a moving target; while Volume 1 was released in 1968, Volume 4 is still in progress as of 2020 &lt;a class="footnote-reference" href="#taocpwiki" id="id1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;img alt="The Art of Computer Programming" class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3fz2RxP2aYWm20KIl9hU_BkQcyTNxSmewF-0TM7KLe2BbVwUsml4DmX7kgHf4E8vARaOSQFJ-d1zou3FMoD4hjaX8q3jSFcKZwty559C8BiomechHmEW7gwmIBd8kJvi0u4Zqx0I6UDlA65QuBUX_CEdQ=w500-h431-no" style="width: 33%;" /&gt;
&lt;p&gt;The book is notable for being comprehensive and precise as well as for the extreme care given to the exercises and solutions. Because it's known for being a huge undertaking, some people quip that the book is often recommended without actually having been read. I suspect this is because the algorithms are explained using assembly language rather than structured programming which some people deem as impenetrably  obscure.&lt;/p&gt;
&lt;div class="section" id="why-i-want-to-read-it"&gt;
&lt;h3&gt;Why I want to read it&lt;/h3&gt;
&lt;p&gt;I believe it when Knuth says that you learn something extra about algorithms at the interface of hardware and software. In C for example you may not know what is happening in hardware when you write an if statement, but in assembly this is in-your-face.&lt;/p&gt;
&lt;p&gt;He puts it like this:&lt;/p&gt;
&lt;blockquote&gt;
One of the principal goals of my books is to show how high-level constructions are actually implemented in machines, not simply to show how they are applied. &lt;a class="footnote-reference" href="#knuthmmix" id="id2"&gt;[3]&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;This aligns with my goal of exploring computers to the lowest levels including operating systems as well as CPUs. The more I can understand the software-hardware interface, the happier I will be. Learning algorithms via TAOCP is the software side of my strategy. On the hardware side I'm exploring TTL logic, CPU design, and simple cases of systems integration using vintage microprocessors such as z80, 6502 and 1802. This has also led me to explore prototyping via FPGAs and one day I hope to design a CPU core and bootstrap up to a self-hosting multitasking development environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mix"&gt;
&lt;h2&gt;MIX&lt;/h2&gt;
&lt;p&gt;In order to facilitate the teaching of algorithms and how they interact with hardware, Knuth developed a CPU architecture and corresponding assembly language.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MIX is a hypothetical computer used in Donald Knuth's monograph, The Art of
Computer Programming (TAOCP). MIX's model number is 1009, which was derived
by combining the model numbers and names of several contemporaneous,
commercial machines deemed significant by the author. Also, &amp;quot;MIX&amp;quot; read as a
Roman numeral is 1009.&lt;/p&gt;
&lt;p class="attribution"&gt;&amp;mdash;Wikipedia &lt;a class="footnote-reference" href="#mixwiki" id="id3"&gt;[2]&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Knuth states that &amp;quot;MIX is very much like nearly every computer of the 1960s and 1970s except that it is, perhaps, nicer.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mmix"&gt;
&lt;h2&gt;MMIX&lt;/h2&gt;
&lt;img alt="MMIX" src="https://lh3.googleusercontent.com/pw/ACtC-3cmwaXo3THz54nq3bz9bWJ9N3hK5zfHL9o4JAsdri5mZ7AgP4LPpilaSkxatNxccRDbxKgZ65jDB08Akq1UMV1nGGqktUrq8uXJFhs9ODgtUQ1wT6SAapWlK5zTWLP-tliFKDBuARvEVYmHnRilf89CsQ=w572-h85-no" /&gt;
&lt;p&gt;Computer have changed significantly since the 60s, as Knuth explains:&lt;/p&gt;
&lt;blockquote&gt;
Thirty years have passed since the MIX computer was designed, and computer architecture has been converging during those years towards a rather different style of machine &lt;a class="footnote-reference" href="#knuthmmix" id="id4"&gt;[3]&lt;/a&gt;.&lt;/blockquote&gt;
&lt;img alt="Under Construction" src="https://lh3.googleusercontent.com/pw/ACtC-3fRUt39VqJiEOQ9LhFcwVrsuth55pRA44lyfN51vxoNG0v0DshXSPqc5SdCtLdAnCWPOfLaP-KS5iDdApF0YKfAM8SBZmgyI61tLobpe8lVmxjGyNFkdrOpxaOD4cpvrJddWkV7lvJAUvmMONAoJF6dtg=w683-h131-no" /&gt;
&lt;p&gt;In Volume 1 3rd Edition, he states his plans to replace MIX:&lt;/p&gt;
&lt;blockquote&gt;
However, it must be admitted that MIX is now quite obsolete. Therefore MIX will be replaced in subsequent editions of this book by a new machine called MMIX, the 2009. MMIX will be a so-called reduced instruction set computer (RISC). [...] It will be even nicer than MIX and will be similar to machines that have become dominant during the 1990s.&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="subsequent-editions-fascicles"&gt;
&lt;h2&gt;Subsequent editions, fascicles&lt;/h2&gt;
&lt;p&gt;So we've chosen to explore MMIX, the forward looking ISA of TAOCP, now what? The dilemma we face is that the next edition has not been released yet. The most recent edition, V1 3e, has all of the questions and answers still written with MIX.&lt;/p&gt;
&lt;img alt="The three required books for MMIX" class="align-center" src="https://lh3.googleusercontent.com/pw/ACtC-3cuRVuJCUSUugDBBPjEjvV-g4h9rh4NuHipmWhjvJbgS3zKZGBYrkea6kFi6MYL6-gC-mmhqHvCIB6FMcG6fHf_wzLQ3FSggliRMHXReoaJXcB4XEkEYYUFVJ-tzUwnb0Htv9v26hcMSSMf6vrfC46HXQ=w683-h459-no" /&gt;
&lt;p&gt;So what choice do we have then? Well Donald has kindly release what is known as V1F1 or &lt;em&gt;The Art of Computer Programming, Volume 1, Fasicle 1 -- A RISC Computer for the New Millennium&lt;/em&gt;. A fascicle is a &amp;quot;a separately published installment of a book or other printed work.&amp;quot; Basically it acts as a patch for V1 3e. Replacing the chapter explaining MIX with the MMIX equivalent. It is available on &lt;a class="reference external" href="https://https://www.amazon.com/Art-Computer-Programming-Fascicle-Millennium/dp/0201853922/"&gt;Amazon&lt;/a&gt;. Fun note, these are printed on demand when you place your order.&lt;/p&gt;
&lt;div class="figure align-right"&gt;
&lt;img alt="On demand printing" src="https://lh3.googleusercontent.com/pw/ACtC-3dsG1EowkXAZFHTN5U6GoiV7aHLiLZj4qS4T-LL4_G7bSkTLQFbru0xIrfOSHiVYxg3UDcSqjI3_DC0HQvAiMNwwaaUBNkcFkEqL0Zx5m11fvY5ctohhCmg8e60Y_SAX8k1jyvou9g_R2JqBcRycjhmbg=w509-h678-no" style="width: 66%;" /&gt;
&lt;p class="caption"&gt;Printed the day after I ordered on Amazon.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That covers the basics of the language, but all of the solutions also needed reworked. Knuth put out a request for people to collaborate on the solutions, a project he called MMIXMasters &lt;a class="footnote-reference" href="#mmixmasters" id="id5"&gt;[4]&lt;/a&gt;. The end result of this is known as the MMIX supplement. It's available on the web, &lt;a class="reference external" href="http://mmix.cs.hm.edu/supplement/index.html"&gt;http://mmix.cs.hm.edu/supplement/index.html&lt;/a&gt; as well as in printed form on Amazon: &lt;a class="reference external" href="https://www.amazon.com/MMIX-Supplement-Computer-Programming-Volumes/dp/0133992314"&gt;MMIX Supplement&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-work"&gt;
&lt;h2&gt;Future Work&lt;/h2&gt;
&lt;p&gt;I'm excited to keep working through these exercises. To assist the process of testing various algorithms, I've started a side-project which I have compiled Knuth's original MMIX toolchain to WASM and wrapped it in a simple IDE for MMIX in the browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hardware-and-risc-v"&gt;
&lt;h2&gt;Hardware and RISC-V&lt;/h2&gt;
&lt;p&gt;I plan to continue working on the hardware side in tandem as well. I dream of the day I could write some of these algorithms for an FPGA RISC-V CPU or even more exciting, a toy ISA of my own.&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="taocpwiki" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming"&gt;https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="mixwiki" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIX"&gt;https://en.wikipedia.org/wiki/MIX&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="knuthmmix" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[3]&lt;/td&gt;&lt;td&gt;&lt;em&gt;(&lt;a class="fn-backref" href="#id2"&gt;1&lt;/a&gt;, &lt;a class="fn-backref" href="#id4"&gt;2&lt;/a&gt;)&lt;/em&gt; &lt;a class="reference external" href="https://www-cs-faculty.stanford.edu/~knuth/mmix.html"&gt;https://www-cs-faculty.stanford.edu/~knuth/mmix.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="mmixmasters" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id5"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a class="reference external" href="http://mmix.cs.hm.edu/mmixmasters/index.html"&gt;http://mmix.cs.hm.edu/mmixmasters/index.html&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="programming"></category><category term="assembly"></category><category term="algorithms"></category><category term="MMIX"></category><category term="TAOCP"></category><category term="books"></category></entry><entry><title>Learn how computers work between silicon and assembly — Build a CPU with Python</title><link href="http://blog.y2kbugger.com/2018-12-11-carpe.html" rel="alternate"></link><published>2018-12-11T00:00:00-05:00</published><updated>2018-12-11T00:00:00-05:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2018-12-11:/2018-12-11-carpe.html</id><summary type="html">&lt;p class="first last"&gt;CARPE December Meeting, Columbus, Ohio&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&amp;#64; &lt;strong&gt;CARPE December Meeting&lt;/strong&gt;, &lt;em&gt;Columbus, Ohio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://drive.google.com/open?id=12KYvWFvr7uSeOLgl2vSXf_TAWIMcBV3WC4VD1vP2Oag"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --branch 2018-12-11-CARPE https://y2kbugger@github.com/y2kbugger/sapy.git
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="Slide about my CPU presentation." class="align-center" src="https://lh3.googleusercontent.com/ZXuaqX-m6ynsOKnvGmfCwM3ov2loiSR3v2blG5vykRSaExcyKPn1WL-BS2tEj5kS_Dp0PojmRHXiyDcioR6WHKNAOWr_P_hSRZ0Vj98yR8fn-mBovfziqiXAZj5poI7Wl_O98YkYQIQ=w596-h447-no" style="width: 100%;" /&gt;
&lt;p&gt;Programming languages are designed for a specific level of abstraction or distance from the hardware. The main trade off is &amp;quot;developer productivity&amp;quot; vs &amp;quot;control over hardware&amp;quot;. C and assembly are low level and therefore map closely to CPU instructions. Python on the other hand goes through many layers, libraries, and a virtual machine before the CPU is reached. This allows powerful programs to be written concisely and cross-platform—but it also conceals the true nature at the heart of our modern world. Unveiling the magic within can lead to interesting insights about how computing got to where it is today.&lt;/p&gt;
&lt;p&gt;We will build up CPU focused on transparency, interactivity, and modularity. Our CPU has a configurable architecture and machine language. Yes, you can invent your own assembly instructors to add functionality. We will cover registers, data/address busses, memory&amp;nbsp;(ROM/RAM), IO, and assemblers.&lt;/p&gt;
&lt;p&gt;Specs for nerds: 8-bit words, 256 memory addresses, Von Neumann w/ shared address+data bus, DMA with numpy based buffer.&lt;/p&gt;
</content><category term="talks"></category><category term="CARPE"></category><category term="Python"></category><category term="Retrocomputing"></category></entry><entry><title>Learn how computers work from opcodes to IO — Building a Virtual Machine in Python</title><link href="http://blog.y2kbugger.com/2018-10-29-cohpy.html" rel="alternate"></link><published>2018-10-29T00:00:00-04:00</published><updated>2018-10-29T00:00:00-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2018-10-29:/2018-10-29-cohpy.html</id><summary type="html">&lt;p class="first last"&gt;COhPy October Meeting, Columbus, Ohio&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&amp;#64; &lt;strong&gt;COhPy October Meeting&lt;/strong&gt;, &lt;em&gt;Columbus, Ohio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://drive.google.com/open?id=1Laue0CnRrtKDYxWJLnYe6d2f8ZJHxvSshZZY9GZTpEI"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone --branch 2018-10-29-COhPy https://y2kbugger@github.com/y2kbugger/sapy.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Programming languages are designed for a specific level of abstraction or distance from the hardware. The main trade off is &amp;quot;developer productivity&amp;quot; vs &amp;quot;control over hardware&amp;quot;. C and assembly are low level and therefore map closely to CPU instructions. Python on the other hand goes through many layers, libraries, and a virtual machine before the CPU is reached. This allows powerful programs to be written concisely and cross-platform—but it also leaves an immense &amp;quot;Magic Valley&amp;quot; of faith. Eliminating the magic can lead to interesting insights and a greater appreciation for the subtleties of performance, quirks of legacy compatibility, and the purpose of operating systems.&lt;/p&gt;
&lt;p&gt;We will build up a virtual machine in Python, and I will connect these concepts to concrete hardware details as they naturally emerge. Guaranteed material: opcodes, CPU, data/address bus, ROM/RAM, and IO. Bonus material: assemblers, interrupts, tty output.&lt;/p&gt;
</content><category term="talks"></category><category term="COhPy"></category><category term="Python"></category><category term="Retrocomputing"></category></entry><entry><title>The Art of (Virtual) Rubber Compounding</title><link href="http://blog.y2kbugger.com/2018-09-12-tire-society.html" rel="alternate"></link><published>2018-09-12T00:00:00-04:00</published><updated>2018-09-12T00:00:00-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2018-09-12:/2018-09-12-tire-society.html</id><summary type="html">&lt;p class="first last"&gt;Tire Society, Akron, OH&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&amp;#64; &lt;strong&gt;Tire Society&lt;/strong&gt;, &lt;em&gt;Akron, OH&lt;/em&gt;&lt;/p&gt;
&lt;img alt="First time in front of such a large audience." src="https://lh3.googleusercontent.com/zfciYIV-Jb8SrG3rkqVaagMX7JbQW25udAJwTbq3zSqNf-y-5xMJdw8QlH76WVIBB_nY0tEKAy68nRczf4AYMrK86ay_Kfa4BDfFuXPTOR7khUnxq60hnLDFiwYZuJxOMRpAb6_IFOU=w530-h678-no" style="width: 40%;" /&gt;
&lt;p&gt;The art of rubber compounding has historically been mastered by a small group of experts with extreme breadth and depth of experience. The rising trend of fluidity between companies is making loyal lifetime &amp;quot;sage compounders&amp;quot; a dying breed and organizations must find new ways to capture and archive experience despite having turnover. Minimizing the time before a new hire becomes productive also becomes critical.&lt;/p&gt;
&lt;p&gt;Complex interactions between raw materials and processing make &amp;quot;rules of thumb&amp;quot; insufficient for discovering new technology. These guidelines, even when properly captured, are often overfit to specific scenarios and can be skewed by human cognitive biases—a disadvantage that is especially detrimental when exploring new technology. Machine Learning, on the other hand, is a method of encoding &amp;quot;experience&amp;quot; based on many observations. Industries that have been revolutionized by data science include algorithmic trading, healthcare, and retail. Just as data has taken the art out of sales and stocks, so too could it allow for more accurate formulation development and reduced cycle time.&lt;/p&gt;
&lt;p&gt;Two main challenges affect the amount and quality of data that can be acquired:&lt;/p&gt;
&lt;ol class="loweralpha simple"&gt;
&lt;li&gt;Many of the standard tests for raw materials are related to verifying material identity and purity rather than predicting compound performance.&lt;/li&gt;
&lt;li&gt;Even in the largest rubber development laboratories, the number of material-to-compound observations is relatively small compared to the vast amounts of data available in other industries.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These challenges will need to be overcome in order to develop models of structure / property relationships to evaluate, iterate, and tune each component of a rubber formula and quickly react to business needs.&lt;/p&gt;
</content><category term="talks"></category><category term="Tire-Society"></category></entry><entry><title>Using Termux: Creating a first class Python environment on Android CLI or how I pushed mobile development too far.</title><link href="http://blog.y2kbugger.com/2018-06-15-cohpy.html" rel="alternate"></link><published>2018-06-15T00:00:00-04:00</published><updated>2018-06-15T00:00:00-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2018-06-15:/2018-06-15-cohpy.html</id><summary type="html">&lt;p class="first last"&gt;COhPy June Meeting, Columbus, Ohio&lt;/p&gt;
</summary><content type="html">&lt;p&gt;&amp;#64; &lt;strong&gt;COhPy June Meeting&lt;/strong&gt;, &lt;em&gt;Columbus, Ohio&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://drive.google.com/open?id=1I6jmlPeBjosl1zJ_XNTXPfcvKGAKvzoYqedefctW6m0"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So you've tried QPython but it just doesn't feel complete? Not sure how to &amp;quot;go mobile&amp;quot; as laptops become uselessly obsolete? Whether you love VIM or not you'll enjoy having the full power of a linux CLI to manage your Android Python development environment. Combining the Termux package repo and pip allows installing most packages directly and building many more from source using clang. Pipenv and git can also be used to synchronize development between your phone and other environments, and if you're a vimmer autocomplete is just a few extensions away. Data scientists will also enjoy the unexpected interactive support.&lt;/p&gt;
</content><category term="talks"></category><category term="COhPy"></category><category term="Python"></category><category term="Android"></category><category term="Termux"></category></entry><entry><title>Bread I - No Knead Recipe</title><link href="http://blog.y2kbugger.com/no-knead-bread-one.html" rel="alternate"></link><published>2018-01-26T18:11:00-05:00</published><updated>2018-01-26T18:11:00-05:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,2018-01-26:/no-knead-bread-one.html</id><summary type="html">&lt;p class="first last"&gt;On a whim I decided to bake bread.&lt;/p&gt;
</summary><content type="html">&lt;!-- Google Photos Album: https://photos.app.goo.gl/nYJc12HSGYu5zAw82 --&gt;
&lt;div class="section" id="my-first-shot-at-baking-bread"&gt;
&lt;h2&gt;My First Shot at Baking Bread&lt;/h2&gt;
&lt;p&gt;Proofing the yeast in a warm water with sugar. The foam means it's still alive.&lt;/p&gt;
&lt;img alt="Brand of flour and year proofing." class="align-center" src="https://lh3.googleusercontent.com/u0o1ygguOveQt9lYaeh1QjKIWasGPc0oKkZQLQkMUWOZzFbES8x2XOtn8kuD4tXcqiNiWthSvEjAGtxgZmqAgleWQj11rLGTHANindMiOlZMEO73yCk3R4K1lVXb-6Xnv087It9d_D3uxvgmqA3P1M5WfBd6lg7JJWIqr_fsbTNolVgvREDi4xK7drzxmB4cGvZvdQ-NirobLN5JSdYzWqCUyU7U86jZ0K9Jh1KSVp4eMz7OrQ5NE5ROkPdwmBGvMUfdM8FV4Ay0l4QLyNahHiZ3XEbCKFFmY-2KB2wFmpAAIgtfMgeLibYHztkWsGzv8JPAXxl5WDkcPPl9SeX5vtomEF_V8fvZbu-t_8ooAn6E2vv6JhujH1amm9Q-rwmiDzIw47G5DF5iVmUWqMbAUtnkvlYjtjLT1dNta4XMKCxLlZqKAJBxapl-EAtyZcvYIejCmxA9uIwpVETr1-CSSKI6MZWZGA4YwxbNAzYjUp9khn7kzm7BqM_KdnPc7TqKlfJ0SLoAtCbIhSPU9HfiaLss_PdfdU6rU3xuTxbCV49dDo88ECwMmMu94Q4XAOXc-R72XpqgSaEPkn9oQlKlBpAYKipcElGIgg4_ZJ-NtEZkiQ4WNdS7lDRZ5nG_EpOWz6VMupCNUGmqgVE-ZN8hXHm-m59p3gtCTHXMg3tFczdB89BVYWamPz7FDg=w683-h432-no" style="width: 100%;" /&gt;
&lt;p&gt;Mix flour and water well, then incorporate salt and yeast.&lt;/p&gt;
&lt;img alt="Mixed dough." class="align-center" src="https://lh3.googleusercontent.com/vq6qyUkoFOqdsCYDlI9kB74CBmDURirDPswQpRcHHO6tFlZercESITS1xxlw7QUwWyyf3PXE9Ro0VZH4QNQDdbY1lS5bQUn37_D6xGN_SU5SKKWtJ-5Nf9Fd8LgpLH9ms3sRgJg2bJht9BpoM6xECEjMtenc1egsFVPn53DCjo_xJB85wz2a0L6jHuWrL8ObXL4NfVAqT0q_HEkVX8Dn2Wwz3Rf6c0XMKlWg_kG-6Dt4rDsd8SFQ7GVK7LorWFJ_29nq94Oqmf9XDhAHVVoOsvpCyHOTT45gzyEDiJW_ZXF86CtZGg2Yk2uIBIg1sdZBcZzxm6a2u1dInG6Tz3AEkk69N04KSvPVRGRuVxcxsZl-AjyYdyEO8y2VLApuwFfvWSVjMF8h2nMmMNkg2LCicyvyY7rbexxx_Z73aou79eSlY48LJDHusxuDtrznwM_QV37LZ6YECDAFRhIukJt6Imu_zEkXQ-4tEZQvkA-62w99pJUS1q_CEaXWIiLK0Ok2gXkux9MBVTD3rLX7q9oNGuFKPBV5a8mf6y7UV3_bOzl0j8ZMXzt9udi-bzcxFu2Q6FR-xrElHLl4ujJJYO1TiyTw_KBbfagpwcAZsnllKg_zme31NaUUNR8lZZfZq1FJNzfia7eY4hYS8BNWFxmdpRoHPxasXKqyeITvKLWs7JHAUWXTncPeuP07Zg=s655-no" style="width: 100%;" /&gt;
&lt;p&gt;Yeast doing its job.&lt;/p&gt;
&lt;img alt="Risen dough." class="align-center" src="https://lh3.googleusercontent.com/3e48QwMiLjH489T4c3DAzd54VIHm14X7puZfqhP0Y-mg3bQ_IuP9zc0XazoFpTmX75vtflOh-jWN0MpWgtDYYup4iUkReOIRXrhDCp5HQ61v7qbVp8nqoKilMBj3kQGpQWF-Ynes1cu-6LGnjYTrNkq_n4jWyvF_KuE8ExIDszWGsbXNEE7DOMWTNyQhM00d4N-U61BhuJdy7TaxEf9GQLz-XWe_U93OokXAk9rqFfEstfcrALYWuIFoUkfBO0Sj6sh2ghcw5m8eAKEUzbPWlvvXA0Q1t92A6hZ5kIDZ_obYKbhTZR8I9S7Jzds0preMjzCJ_hQxbO1ZBEbd9LSZdZVDViw8075ubTh7xwmXZoNbf33vuKyrAoZLTXJj6LZe1tt9Z4WfVBI-HAdCwadEiB9JEPECgCrOsbGfd2zFQmm0eqtMFlFwqNiUduFkIas2IrgUexErGKYsVjBeNK2HaXmuvUetMusBTf3EtwfC_feVp2wIVzyrWi5tesjlv4twdI87gWKkYeeJx2tmvwDSUrKybRcSWtgkBOzQQDOI1Xt3dtVdAvpdl7eG5CaD_WkofZ40WGRT1DI6RXvoHH8U8MxxphRtET_LXAGRgSqYaNnwyO68rSFn8DpXJ_wbGJ5HmugwUlumDyfNKB-ExnJdGJk100C7OTF5GRwxNofjNyC2VkYkz3ZV4zzV3g=w492-h655-no" style="width: 100%;" /&gt;
&lt;p&gt;Proofing dough in a frying pan. Final rise is to allow the gluten to relax enough for a big rise to happen in oven.&lt;/p&gt;
&lt;img alt="Proofing dough." class="align-center" src="https://lh3.googleusercontent.com/ZCTGUWxaDspmJhfSdFE8AP9zjOoNR8SXn2aNBuTV1DCkl16MrOrdVZPGr0a3gox_whovCYpIH_bP4sed9_ENXra6tXkNMJMFvY5jxtjtLwrJ5o-IsGH9voAWHCjiCuzV0AuuLOQHV90Zjgn1jTMzOuXdh_KwED04yTjOZtzus2m2xry4u6oWlFEw3f_dx1B_voKeDTplMHdfNIRIlcuFW5kYwMyyIatAuguoOsCGcd738buJ0ghxzunPnasMOWCFu2IM8wW12jTW68cP5m-catu0aOntOYSUOFOp3q_ldVMcIdBFi3-OoTIj3cRd0BWyepiLCnycWFpe8yCJgKh4CNItAKvjqldzUGp-HkCU7-621rDLmqs5diBr3udMEPbuWGqT7TZkSe4YOhUR__96IpX5TN4J229h290DJnQ5tEl-nj9LtriZ6iA16TGFAn_9a0DAB4Ie77jYsrlPikrSlgFRtiQ5clw0Al2-mYJyuOHoAiMIjj_SJN7IfefCf2M98nZIJHv0_FkuPjN0JlUJp3YLoKA5Ny5HcKysUs9va8wn1uqRT9G4eCBoB_5yks86UYJ_MPQyssoAFhe2JVH3ZWPRj13eR76lrRy9QBcvZDGa3Fhdebc_6KJza0s58PzFv8IkjHX7EOn3Bcphf2heoEb17yr47_TLP_BD3-wMfs9td3ixPeI6Pdi1qg=w683-h513-no" style="width: 100%;" /&gt;
&lt;p&gt;Flipped dough into a dutch oven. Cover and bake at ~450F.&lt;/p&gt;
&lt;img alt="Before bake." class="align-center" src="https://lh3.googleusercontent.com/tgtxE99wy8WLvDUJGtiOkyyBgI5-T7OW5j6GrB7k1PxSpScnxTVuIRICkP3qaJRMmlCVMj8aqaZvHbHZQ7ev_mw-iMp43uEgHy8Z0h_Xm4P-rxemZtcSqZnjATvfM6MfEElq7ja_45T5MEL33B_VEmJZbbqbQytuuLLix1GsXCZ4vAlaXsFcwaYVvoAURioIsQyRcuDe90eAkvq7yPykODx96VjNhm8l0wNvcYVBL_DdiBiVIG7if4XhApHhvX-vAgcmBj8tNjdbVrLybRK8X8ag9n8pyMVxn1_I411VoE4XHMOddZBJJ--lm4P-OVNfFkBYqBxmak3rMyWVARzRYP-iBdnkRFemCH8L2OZsqiPHWBJKXJLBr-R7BsZa45G_uQRXqwgVW74NzLMg3c7pk9ibEs0Nyy8OMOYCUvxHZkOgrYA_FIUrAk1J53glRr8jIenaBNRzQY9B_Oy_R_KjK6G3XrIHz3rJS_kd-dUqrNmOHK7xQJRLGm4FR2_n5qs0adxUP_7jZbcPUBS_nMw1kYlt9uVWdRqsnx9qjtqhSa1sYUbmxEbx4aUsM0-yg3ztLWl3gHl4lwfjgxBJNED8Yplzq6UsYmwtj4Ko1BcT3YpZGIHJ70TyXQGbnHoTJx7WofDXIwbTR4GvzWDxwfIp6wScsHRFpNlLG27dakPFw1QP_oBd6r5xgMyxFg=w683-h513-no" style="width: 100%;" /&gt;
&lt;img alt="Fresh Bread." class="align-center" src="https://lh3.googleusercontent.com/0HFdWBGE3T90rz5UNIUaIV8xrRm-VFIO3i3x48O6322b9GWA1BIE0F_tBjpBwsbkduObigapGSFZWN4g8si4tKNxX7C-j1AD9-vpmnyIpvrCBrIu12SAxw6kGKzASPefMnhEpyTc7yTVJMFJstto2HRKxd6zmDxK0rLmsBPGNG-oZS3jHanXeaPqiC8ZYcnq1iwTity7Bm4lszBrbnkW2fuopEij8Peji95DVHwpPyJ9onwbzbgB-imYpT-ylU0_9LODCEPwCZl1W7j11ALkMH5uJ7eCPE_5ReA4Sd-hrA5ceGrSFVPYbY8M_UexC6W1yWC0zGMAJUW4AIlMeqSJjRJKvji_-gsXVe_YnBETs22M6XPpUgDtT0N4CtxwknyvCKav_d7obzEUdkmmuKzprPvj0LXGkGoIDYoEExYXx8jOK40FrEIvW0kO83neWu9YY9i0CXwyZ5N_yqnEszTxMaxBgLjN3LTPB8SJxOOiQRAw1YMMwpscgwvnd3AwHpJrYS9RL9wPHF1k-tkG334EDba1O3_0ePflpSdOSigBkyyCTXQn28Sl64D0UF6wUG_KC2ObPU4s295YvBVLDNzuwxfvJjATIMEvX7id6goO929-G_S2tBadZGo8d6YeB4CWgurEz-9xZNF6TtfRlsaxsg8Zs-FqtjupYROLERxSJ04mtUUMSL8ec1HP2g=w683-h513-no" style="width: 100%;" /&gt;
&lt;p&gt;Success!&lt;/p&gt;
&lt;img alt="Good Texture." class="align-center" src="https://lh3.googleusercontent.com/Ct3rJTS_W9PUlWKnM86XUgSNlsH468-llaz-A_yY09DeaALtC5I-6CzasK7I0DN7bNkD-9vgtbF8vS3Ds_RanoBia0n2dZWXAXLYRuEz9n_boB-J1qNrNhwmMU42JX-04x9XO5kvZ7U1OzDXe9QV2jSA65umzzulBJkCUzluETswOPVB-z2o_gLWo8nTUC68_NeuN5achEVYua_baoJs94VPQpG08N1sdtaJCsLjWJgr7nr30cPGccosY0PpGPSajIhGEcDopmqYb_XQTUPY3qDj-VWhvTpBq2Qzak7RDUHKLi0gvrL_wPeABnfin6uhf19VqUB4ZUe2SaHA0qwumCgW1EsCdOFm262wf-XaAPdnWS3f8VFSVnGviHsxETtao3JFM7Z0M8zBvqLXLnpoASVWaHkD8tQI_4e1EU1EgjUhbagxs1kceL5mNjTLMUfcAruZTxL8FzefYaC5ic9XGWSsr2GL58YZsdDdybugyZlQAb_qDbMA_OdVtcbDvAoCrUvZqbSyHBn8_wxkxkacDbq4ac_eyTB8B1BSGHh5CMUq3Lt73O_ecY_gp5fjp8r8g6iiiVPmahyw5kmnvEzKg2POMuQaUF4Am-ENHj_YIJKAqQ_uGX6dfI9QHZXDcjTLvOUNarPcNwgbstDUqQNAR3kIRz9lwOnL_0eGW8Wj_vJsn67a-1auFpcAog=w683-h447-no" style="width: 100%;" /&gt;
&lt;/div&gt;
</content><category term="food"></category><category term="bread"></category></entry><entry><title>blog.y2kbugger.com - Timeline of my Projects</title><link href="http://blog.y2kbugger.com/origin.html" rel="alternate"></link><published>1991-09-29T00:00:00-04:00</published><updated>2020-03-28T22:16:59-04:00</updated><author><name>zak kohler</name></author><id>tag:blog.y2kbugger.com,1991-09-29:/origin.html</id><summary type="html">&lt;p class="first last"&gt;I explain how I use dates on this blog. The purpose of this blog is to showcase my projects past and future and so publication dates shouldn't be taken as the actual data the article was written.&lt;/p&gt;
</summary><content type="html">&lt;!-- https://photos.app.goo.gl/nBk15GV92Uvt7ZzF8 --&gt;
&lt;div class="section" id="purpose-of-this-blog"&gt;
&lt;h2&gt;Purpose of this blog&lt;/h2&gt;
&lt;p&gt;The reason this site exists is to track and showcase my various projects. I
value having an accurate timeline of when the projects were worked on more than
when they were written about.&lt;/p&gt;
&lt;div class="section" id="use-of-dates"&gt;
&lt;h3&gt;Use of dates&lt;/h3&gt;
&lt;p&gt;To have an accurate project timeline, I will make the date of an article be the
date when a project or stage of a project was completed. So you can still know
when an article was publish, I will use the last modified on field even for new
articles. This not only ensures an accurate timeline, but it gives the
opportunity to go back and curate past projects.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Young zak at the computer." src="https://lh3.googleusercontent.com/D9Q1Ag8tAEmQIo8cJ1ChfEAlZyodx60aHR4XBwUe7_GGb8tKOI49lfPno9FuFTM7c2khVeDTgpiMmhsKOLeDmUlhb8gw-AHKMUyPGVhKpjBuCrogEpsvu624IUwYNs3OBCGb0Xhk1kw=w683-h483-no" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;Zak circa 1995. Some things never change.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="historical-stubs"&gt;
&lt;h3&gt;Historical stubs&lt;/h3&gt;
&lt;p&gt;For some historical projects I plan to just make a stub article and include a few photos. If there is interest in any one of them in particular I will update with more details. This can also just serve as an index for when I need to showcase my talents; I can elaborate on them in person.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Ohio LinuxFest 2019" src="https://lh3.googleusercontent.com/E5Je4pWOapBTC3A7eaTcEpl_esrlSkCLIOaj8OueJ7mQg6WDiBAqPInbkf619wPP1gWmUy6exkZLEA_479kfIZCMMSbIqm2_Zn4_6qM9qcpQEYnqxc8Rzm8AjJbj_K8YqIhOKlrNg2A=w683-h455-no" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;Ohio LinuxFest 2019&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Thanks for reading, and I hope I you have found something useful or entertaining here.&lt;/p&gt;
&lt;div class="figure"&gt;
&lt;img alt="Central Ohio Python" src="https://lh3.googleusercontent.com/SZuGLUx0uXaHjoDduwtfltstTODj3IQZoPAZ-bElZBDGAboCR8IvGBfhDTR8DSF_UDx285XJDNt0H9ZewtDJZ0hZgnU7AJBOCDX6HgU84aanZUNtithhRoqhpirQUBpVYRST6bIe6Yg=w683-h511-no" style="width: 100%;" /&gt;
&lt;p class="caption"&gt;Central Ohio Python, 2018&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="meta"></category><category term="origin"></category></entry></feed>